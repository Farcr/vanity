archivesBaseName = "${rootProject.archivesBaseName}-${project.name}"

architectury {
    platformSetupLoomIde()
    fabric()
}

sourceSets {
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    silentMojangMappingsLicense()
    runs {
        testClient {
            client()
            ideConfigGenerated true
            name = "Test Client"
            source sourceSets.test
            property("fabric-api.gametest")
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi(include("com.teamresourceful.resourcefullib:resourcefullib-fabric-1.20.1:${rootProject.rlib_version}"))

    modApi "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    modRuntimeOnly "mezz.jei:jei-1.20.1-fabric:${rootProject.jei_version}"

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${rootProject.mixinextras_version}")))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "mod_id", project.mod_id
    inputs.property "mod_version", project.mod_version
    inputs.property "mod_name", project.mod_name
    inputs.property "mod_description", project.mod_description
    inputs.property "archives_base_name", project.archives_base_name

    inputs.property "minecraft_version", project.minecraft_version

    filesMatching(["fabric.mod.json"]) {
        expand "mod_id": project.mod_id,
                "mod_version": project.mod_version,
                "mod_name": project.mod_name,
                "mod_description": project.mod_description,
                "archives_base_name": project.archives_base_name,
                "minecraft_version": project.minecraft_version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}